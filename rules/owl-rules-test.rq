# OWL Rules Test

# OWL-rules taylored to correspond to the SPARQL entailment tests in:
# http://www.w3.org/2009/sparql/implementations/

PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

## inv1 (from SparkWave)

INSERT { ?q owl:inverseOf ?p }
WHERE { ?p owl:inverseOf ?q } ;

## extra1: paper-sparqldl-Q1

# owl:Nothing is a subclass of every class
# owl-ref section 3.1: http://www.w3.org/TR/owl-ref/

INSERT { owl:Nothing rdfs:subClassOf ?x }
WHERE { ?x a owl:Class } ;

## extra2: paper-sparqldl-Q2 - NOT GOOD

# owl:intersectionOf
# MJR: This implementation handles only rdfs:subClassOf membership relations, how 
# However, it creates lists longer than 2 elements and avoids calling a class an intersection of itself.

INSERT {
  ?c0 owl:intersectionOf ( ?c1 ?c2 ) }
WHERE { ?c0 a owl:Class ;
            rdfs:subClassOf ?c1 ;
            rdfs:subClassOf ?c2 .
	FILTER (!sameTerm(?c1,?c2))
	FILTER (!sameTerm(?c0,?c1))
	FILTER (!sameTerm(?c0,?c2)) } ;

## paper-sparqldl-Q3

# owl:disjointWith vs. owl:complementOf. Added as owl rule6b.
# MJR: Not sure if the assumption is legal.
# Requires rdfs11.

## paper-sparql-parent4

# owl:minCardinality
# Implemented simply as inserting a "minCardinality 1" specification, if there is at least one such property.
# Currently commented out, a:
# a) Cardinality restrictions make little sense in streaming environments.
# b) INSTANS doesn't support xsd:nonNegativeInteger, so paper-sparql-parent4 doesn't match with this.

# INSERT { ?s rdf:type [
#        a owl:Restriction ;
#        owl:onProperty ?p ;
#        owl:minCardinality "1"^^xsd:integer  ] . } 
# WHERE { ?s ?p ?o .
#         ?p a owl:ObjectProperty } ;

# SELECT *
# WHERE { ?s rdf:type [
#        a owl:Restriction ;
#        owl:onProperty ?p ;
#        owl:minCardinality "1"^^xsd:integer  ] . } ;

## simple4

# Attempted solution below does not yet work as desired.
# Also looks like this task is much better solved with SPARQL UNION than trying to constantly
# generate entailments from a stream.

# INSERT { 
#    ?y a [
#        a owl:Class ;
#        owl:unionOf ( ?x1 ?x2 )
#    ] . 
# }
# WHERE { 
#    ?x1 a owl:Class .
#    ?x2 a owl:Class .
#    ?y a ?x1 .
#    ?y a ?x2 .
#    FILTER (!sameTerm(?x1,?x2))
#    FILTER (!isBlank(?y))
#    FILTER (!isBlank(?x1))
#    FILTER (!isBlank(?x2))} ;

## extra3: sparqldl-12.rq

# MJR: What is the actual criteria of something being in the domain of owl:Thing?
# This version passes the test, but should it rather apply to e.g. all subjects?

INSERT { ?x rdfs:domain owl:Thing }
WHERE { ?x rdfs:domain ?y } ;

## extra4: simple1.rq

INSERT {
  ?x a [ owl:intersectionOf ( ?c0 ?c1 ) ] }
WHERE { ?c0 a owl:Class .
        ?c1 a owl:Class .
        ?x a ?c0 ;
	   a ?c1 .
	FILTER (!sameTerm(?c0,?c1)) } ;

## extra5: simple2.rq

INSERT {
  ?a a [ owl:intersectionOf ( ?c1 [ a owl:Restriction ;
                                      owl:onProperty ?p ;
				      owl:someValuesFrom ?c0 ] ) ] }
WHERE { ?c0 a owl:Class .
        ?c1 a owl:Class .
        ?p a owl:ObjectProperty .
	?a a ?c0 , ?c1 .
	?a ?p [ a ?c0 ] .
	FILTER (!sameTerm(?c0,?c1))
	FILTER (!isBlank(?c1))} ; 

## extra6: simple3.rq

INSERT {
  ?a a [ a owl:Restriction ;
         owl:onProperty ?p ;
	 owl:someValuesFrom [ owl:intersectionOf ( ?c0 ?c1 ) ] ] }
WHERE { ?c0 a owl:Class .
        ?c1 a owl:Class .
        ?p a owl:ObjectProperty .
	?a ?p [ a ?c0 , ?c1 ] .
	FILTER (!sameTerm(?c0,?c1)) } ; 

## extra7: simple4.rq

INSERT {
  ?x a [ a owl:Class ;
         owl:unionOf ( ?c0 ?c1 ) ] }
WHERE { ?c0 a owl:Class .
        ?c1 a owl:Class .
	?x a ?c0 .
	?y a ?c1 .
	FILTER (!sameTerm(?c0,?c1))
	FILTER (!isBlank(?c0))
	FILTER (!isBlank(?c1))
	FILTER NOT EXISTS {
          ?x a [ a owl:Class ;
                 owl:unionOf ( ?c0 ?c1 ) ] } } ; 

## extra8: simple4.rq

INSERT {
  ?x a [ a owl:Class ;
         owl:unionOf ( ?c0 ?c1 ) ] }
WHERE { ?c0 a owl:Class .
        ?c1 a owl:Class .
	?x a ?c1 .
	?y a ?c0 .
	FILTER (!sameTerm(?c0,?c1))
	FILTER (!isBlank(?c0))
	FILTER (!isBlank(?c1))
        FILTER NOT EXISTS {
	  ?x a [ a owl:Class ;
                 owl:unionOf ( ?c0 ?c1 ) ] } } ; 

## extra9: simple5.rq

INSERT {
  ?a a [ a owl:Restriction ;
           owl:onProperty ?p ;
	   owl:someValuesFrom [
	     a owl:Class ;
             owl:unionOf ( ?c1 ?c0 ) ] ] }
WHERE { ?c0 a owl:Class .
        ?c1 a owl:Class .
        ?p a owl:ObjectProperty .
	?a ?p [ a ?c0 ] .
	?b ?p [ a ?c1 ] .
	FILTER (!sameTerm(?c0,?c1))
	FILTER (!isBlank(?c0))
	FILTER (!isBlank(?c1)) } ; 

## extra10: simple6.rq

INSERT {
  ?a a [ a owl:Restriction ;
           owl:onProperty ?p ;
	   owl:allValuesFrom [
	     a owl:Class ;
             owl:unionOf ( ?c0 ?c1 ?c2 ) ] ] }
WHERE { ?c0 a owl:Class .
        ?c1 a owl:Class .
        ?c2 a owl:Class .
        ?p a owl:ObjectProperty .
	?a ?p [ a ?c0 , ?c1, ?c2 ]
	FILTER (!sameTerm(?c0,?c1))
	FILTER (!sameTerm(?c0,?c2))
	FILTER (!sameTerm(?c2,?c1))
	FILTER (!isBlank(?c0))
	FILTER (!isBlank(?c1))
	FILTER (!isBlank(?c2)) } ; 

## extra11: simple6.rq

INSERT {
  ?a a [ a owl:Restriction ;
           owl:onProperty ?p ;
	   owl:allValuesFrom [
	     a owl:Class ;
             owl:unionOf ( ?c0 ?c1 ?c2 ) ] ] }
WHERE { ?c0 a owl:Class .
        ?c1 a owl:Class .
        ?c2 a owl:Class .
        ?p a owl:ObjectProperty .
	?a ?p [ ?p [ a ?c0 , ?c1, ?c2 ] ]
	FILTER (!sameTerm(?c0,?c1))
	FILTER (!sameTerm(?c0,?c2))
	FILTER (!sameTerm(?c2,?c1))
	FILTER (!isBlank(?c0))
	FILTER (!isBlank(?c1))
	FILTER (!isBlank(?c2)) } ; 

## extra12: simple6.rq

INSERT {
  ?a a [ a owl:Restriction ;
           owl:onProperty ?p ;
	   owl:allValuesFrom [
	     a owl:Class ;
             owl:unionOf ( ?c0 ?c1 ?c2 ) ] ] }
WHERE { ?c0 a owl:Class .
        ?c1 a owl:Class .
        ?c2 a owl:Class .
        ?p a owl:ObjectProperty .
	?a ?p [ ?p [ ?p [ a ?c0 , ?c1, ?c2 ] ] ]
	FILTER (!sameTerm(?c0,?c1))
	FILTER (!sameTerm(?c0,?c2))
	FILTER (!sameTerm(?c2,?c1))
	FILTER (!isBlank(?c0))
	FILTER (!isBlank(?c1))
	FILTER (!isBlank(?c2)) } ; 

## extra13: simple7.rq

INSERT {
  ?x a [ a owl:Class ;
         owl:intersectionOf ( 
            ?c2 
            [ a owl:Class ;
              owl:unionOf ( ?c0 ?c1 ) ] ) ] }
WHERE { ?c0 a owl:Class .
        ?c1 a owl:Class .
        ?c2 a owl:Class .
	FILTER (!sameTerm(?c0,?c1))
	FILTER (!sameTerm(?c0,?c2))
	FILTER (!sameTerm(?c2,?c1))
	FILTER (!isBlank(?c0))
	FILTER (!isBlank(?c1))
	FILTER (!isBlank(?c2))
	?x a ?c2 .
	FILTER (!isBlank(?x))
        { ?x a ?c0 } UNION { ?x a ?c1 }	} ;

## extra14: simple8.rq

INSERT {
      ?x a [ a owl:Restriction ;
             owl:onProperty ?p ;
             owl:someValuesFrom [ a owl:Restriction ;
                                  owl:onProperty ?p ;
                                  owl:someValuesFrom ?c ] ] }
WHERE { ?c a owl:Class .
        ?p a owl:ObjectProperty .
	?y a ?c .
	?x ?p [ ?p ?y ] .
} ;

## extra15: parent5.rq

INSERT { ?x a [
           a owl:Restriction ;
           owl:onProperty ?p ;
           owl:someValuesFrom ?z  ] }
WHERE { ?x a [
           a owl:Restriction ;
           owl:onProperty ?p ;
	   owl:allValuesFrom [ a owl:Class ; owl:oneOf ( ?y ) ] ] .
	?y a ?z .
	FILTER (!isBlank(?x))
	FILTER (!isBlank(?y))
	FILTER (!isBlank(?z)) } ;

## extra16: paper-sparqldl-Q3.rq (reverse of rule6 in SWCLOS2)

INSERT { ?u owl:complementOf ?v }
WHERE { ?u owl:disjointWith ?v } ;

